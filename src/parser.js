/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,5],$V2=[1,4],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,25],$Vn=[1,26],$Vo=[1,28],$Vp=[1,29],$Vq=[1,30],$Vr=[1,31],$Vs=[1,32],$Vt=[1,33],$Vu=[1,34],$Vv=[1,35],$Vw=[1,36],$Vx=[1,37],$Vy=[1,38],$Vz=[1,39],$VA=[1,40],$VB=[1,41],$VC=[1,42],$VD=[5,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,26],$VE=[5,7,8,9,10,11,16,26],$VF=[5,7,8,9,10,11,16,17,18,19,20,21,22,23,24,26],$VG=[5,7,8,9,10,11,16,24,26],$VH=[5,7,8,16,26],$VI=[5,7,8,9,10,16,26];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"NUMBER":6,"+":7,"-":8,"*":9,"/":10,"^":11,"!":12,"%":13,"~":14,"(":15,")":16,">":17,"<":18,"<=":19,">=":20,"==":21,"<>":22,"&&":23,"to":24,"if":25,":":26,"log1p":27,"log10":28,"log2":29,"log":30,"sqrt":31,"cos":32,"sin":33,"tan":34,"atan":35,"acos":36,"asin":37,"abs":38,"acosh":39,"asinh":40,"atanh":41,"ARRAY_NUMBER":42,"E":43,"PI":44,"print":45,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"NUMBER",7:"+",8:"-",9:"*",10:"/",11:"^",12:"!",13:"%",14:"~",15:"(",16:")",17:">",18:"<",19:"<=",20:">=",21:"==",22:"<>",23:"&&",24:"to",25:"if",26:":",27:"log1p",28:"log10",29:"log2",30:"log",31:"sqrt",32:"cos",33:"sin",34:"tan",35:"atan",36:"acos",37:"asin",38:"abs",39:"acosh",40:"asinh",41:"atanh",42:"ARRAY_NUMBER",43:"E",44:"PI",45:"print"},
productions_: [0,[3,2],[4,1],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,7],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = Number(yytext)
break;
case 3:
this.$ = (function (a, b) {
	if (typeof a === 'number' && typeof b === 'number') {
		return a + b;
	} else {
		function sumArrayNum(array, number) {
			return array.map(function (el) {
				return el + number;
			})
		}

		function sumArrays(array1, array2) {
			var max = [], min = [];
			if (array1.length > array2.length) {
				max = array1;
				min = array2;
			} else {
				max = array2;
				min = array1;
			}
			return max.map(function (el1, index) {
				if (min.length > index) return el1 + min[index];
				return max[index];
			})
		}

		try {
			a = JSON.parse(a)
		} catch (e) {
		}
		try {
			b = JSON.parse(b)
		} catch (e) {
		}
		if (typeof a === 'object' || typeof b === 'object') {
			if (Array.isArray(a) && typeof b === 'number') {
				return sumArrayNum(a, b);
			} else if (Array.isArray(b) && typeof a === 'number') {
				return sumArrayNum(b, a);
			} else if (Array.isArray(b) && Array.isArray(a)) {
				return sumArrays(a, b);
			}
		}
	}
})($$[$0-2], $$[$0])
break;
case 4:
this.$ = (function (a, b) {
	if (typeof a === 'number' && typeof b === 'number') {
		return a - b;
	} else {
		function divArrayNum(array, number) {
			return array.map(function (el) {
				return el - number;
			})
		}

		function divNumArray(array, number) {
			return array.map(function (el) {
				return number - el;
			})
		}

		function divArrays(array1, array2) {
			var max = [], min = [];
			if (array1.length > array2.length) {
				max = array1;
				min = array2;
			} else {
				max = array2;
				min = array1;
			}
			return max.map(function (el1, index) {
				if (min.length > index) return el1 - min[index];
				return max[index];
			})
		}

		try {
			a = JSON.parse(a)
		} catch (e) {
		}
		try {
			b = JSON.parse(b)
		} catch (e) {
		}
		if (typeof a === 'object' || typeof b === 'object') {
			if (Array.isArray(a) && typeof b === 'number') {
				return divArrayNum(a, b);
			} else if (typeof a === 'number' && Array.isArray(b)) {
				return divNumArray(b, a);
			} else if (Array.isArray(b) && Array.isArray(a)) {
				return divArrays(a, b);
			}
		}
	}
})($$[$0-2], $$[$0])
break;
case 5:
this.$ = (function (a, b) {
	if (typeof a === 'number' && typeof b === 'number') {
		return a * b;
	} else {
		function multiplyArrayNum(array, number) {
			return array.map(function (el) {
				return el * number;
			})
		}

		function multiplyArrays(array1, array2) {
			var max = [], min = [];
			if (array1.length > array2.length) {
				max = array1;
				min = array2;
			} else {
				max = array2;
				min = array1;
			}
			return max.map(function (el1, index) {
				if (min.length > index) return el1 * min[index];
				return max[index];
			})
		}

		try {
			a = JSON.parse(a)
		} catch (e) {
		}
		try {
			b = JSON.parse(b)
		} catch (e) {
		}
		if (typeof a === 'object' || typeof b === 'object') {
			if (Array.isArray(a) && typeof b === 'number') {
				return multiplyArrayNum(a, b);
			} else if (Array.isArray(b) && typeof a === 'number') {
				return multiplyArrayNum(b, a);
			} else if (Array.isArray(b) && Array.isArray(a)) {
				return multiplyArrays(a, b);
			}
		}
	}
})($$[$0-2], $$[$0])
break;
case 6:
this.$ = (function (a, b) {
	if (typeof a === 'number' && typeof b === 'number') {
		return a / b;
	} else {
		function divArrayNum(array, number) {
			return array.map(function (el) {
				return el / number;
			})
		}

		function divNumArray(array, number) {
			return array.map(function (el) {
				return number / el;
			})
		}

		function divArrays(array1, array2) {
			var max = [], min = [];
			if (array1.length > array2.length) {
				max = array1;
				min = array2;
			} else {
				max = array2;
				min = array1;
			}
			return max.map(function (el1, index) {
				if (min.length > index) return el1 / min[index];
				return max[index];
			})
		}

		try {
			a = JSON.parse(a)
		} catch (e) {
		}
		try {
			b = JSON.parse(b)
		} catch (e) {
		}
		if (typeof a === 'object' || typeof b === 'object') {
			if (Array.isArray(a) && typeof b === 'number') {
				return divArrayNum(a, b);
			} else if (typeof a === 'number' && Array.isArray(b)) {
				return divNumArray(b, a);
			} else if (Array.isArray(b) && Array.isArray(a)) {
				return divArrays(a, b);
			}
		}
	}
})($$[$0-2], $$[$0])
break;
case 7:
this.$ = Math.pow($$[$0-2], $$[$0])
break;
case 8:
this.$ = (function(n) {if(n==0) return 1; return arguments.callee(n-1) * n})($$[$0-1])
break;
case 9:
this.$ = $$[$0-1]/100
break;
case 10:
this.$ = ($$[$0]*-1)
break;
case 11:
this.$ = -$$[$0]
break;
case 12:
this.$ = $$[$0-1]
break;
case 13:
this.$ = ($$[$0-2] > $$[$0])? 1:0
break;
case 14:
this.$ = ($$[$0-2] < $$[$0])? 1:0
break;
case 15:
this.$ = ($$[$0-2] <= $$[$0])? 1:0
break;
case 16:
this.$ = ($$[$0-2] >= $$[$0])? 1:0
break;
case 17:
this.$ = ($$[$0-2] == $$[$0])? 1:0
break;
case 18:
this.$ = ($$[$0-2] != $$[$0])? 1:0
break;
case 19:
this.$ = ($$[$0-2] && $$[$0])
break;
case 20:
this.$ = (function (from, to) {
	var _arr_ = [];
	if (from < to) {
		for (var i = from; i <= to; i++) {
			_arr_.push(i)
		}
	} else {
		for (var i = to; i <= from; i++) {
			_arr_.push(i)
		}
	}
	return _arr_;
})($$[$0-2], $$[$0])
break;
case 21:
this.$ = $$[$0-4]?$$[$0-2]:$$[$0]
break;
case 22:
this.$ = Math.log1p($$[$0])
break;
case 23:
this.$ = Math.log10($$[$0])
break;
case 24:
this.$ = Math.log2($$[$0])
break;
case 25:
this.$ = Math.log($$[$0])
break;
case 26:
this.$ = Math.sqrt($$[$0])
break;
case 27:
this.$ = Math.cos($$[$0])
break;
case 28:
this.$ = Math.sin($$[$0])
break;
case 29:
this.$ = Math.tan($$[$0])
break;
case 30:
this.$ = Math.atan($$[$0])
break;
case 31:
this.$ = Math.acos($$[$0])
break;
case 32:
this.$ = Math.asin($$[$0])
break;
case 33:
this.$ = Math.abs($$[$0])
break;
case 34:
this.$ = Math.acosh($$[$0])
break;
case 35:
this.$ = Math.asinh($$[$0])
break;
case 36:
this.$ = Math.atanh($$[$0])
break;
case 37:
this.$ = $$[$0]
break;
case 38:
this.$ = Math.E
break;
case 39:
this.$ = Math.PI
break;
case 40:
this.$ = (function(expr) {console.log(expr); return expr})($$[$0])
break;
}
},
table: [{3:1,4:2,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{1:[3]},{5:[1,27],7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC},o($VD,[2,2]),{4:43,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:44,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:45,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{15:[1,46]},{4:47,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:48,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:49,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:50,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:51,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:52,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:53,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:54,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:55,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:56,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:57,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:58,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:59,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:60,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:61,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),{4:62,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{1:[2,1]},{4:63,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:64,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:65,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:66,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:67,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},o($VD,[2,8]),o($VD,[2,9]),{4:68,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:69,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:70,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:71,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:72,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:73,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:74,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{4:75,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},o($VE,[2,10],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VD,[2,11]),{7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,16:[1,76],17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC},{4:77,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},o($VF,[2,22],{12:$Vt,13:$Vu}),o($VF,[2,23],{12:$Vt,13:$Vu}),o($VF,[2,24],{12:$Vt,13:$Vu}),o($VF,[2,25],{12:$Vt,13:$Vu}),o($VG,[2,26],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,27],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,28],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,29],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,30],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,31],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,32],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,33],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,34],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,35],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VG,[2,36],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VF,[2,40],{12:$Vt,13:$Vu}),o($VH,[2,3],{9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VH,[2,4],{9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VI,[2,5],{11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VI,[2,6],{11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VE,[2,7],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC}),o($VF,[2,13],{12:$Vt,13:$Vu}),o($VF,[2,14],{12:$Vt,13:$Vu}),o($VF,[2,15],{12:$Vt,13:$Vu}),o($VF,[2,16],{12:$Vt,13:$Vu}),o([5,7,8,9,10,11,16,21,24,26],[2,17],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,22:$VA,23:$VB}),o([5,7,8,9,10,11,16,21,22,24,26],[2,18],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,23:$VB}),o([5,7,8,9,10,11,16,21,22,23,24,26],[2,19],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy}),o($VG,[2,20],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB}),o($VD,[2,12]),{7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,16:[1,78],17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC},{4:79,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},{7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB,24:$VC,26:[1,80]},{4:81,6:$V0,8:$V1,14:$V2,15:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn},o($VG,[2,21],{12:$Vt,13:$Vu,17:$Vv,18:$Vw,19:$Vx,20:$Vy,21:$Vz,22:$VA,23:$VB})],
defaultActions: {27:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 6
break;
case 2:return 45
break;
case 3:return 30
break;
case 4:return 27
break;
case 5:return 28
break;
case 6:return 29
break;
case 7:return 30
break;
case 8:return 31
break;
case 9:return 32
break;
case 10:return 33
break;
case 11:return 34
break;
case 12:return 35
break;
case 13:return 36
break;
case 14:return 37
break;
case 15:return 39
break;
case 16:return 40
break;
case 17:return 41
break;
case 18:return 38
break;
case 19:return 9
break;
case 20:return 10
break;
case 21:return 8
break;
case 22:return 7
break;
case 23:return 11
break;
case 24:return 12
break;
case 25:return 13
break;
case 26:return 15
break;
case 27:return 16
break;
case 28:return 44
break;
case 29:return 43
break;
case 30:return 14
break;
case 31:return 19
break;
case 32:return 20
break;
case 33:return 22
break;
case 34:return 17
break;
case 35:return 18
break;
case 36:return 21
break;
case 37:return 21
break;
case 38:return 23
break;
case 39:return 24
break;
case 40:return 42
break;
case 41:return 25
break;
case 42:return 26
break;
case 43:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:([0-9]+(?:\.[0-9]+)?)\b)/,/^(?:print\b)/,/^(?:log\b)/,/^(?:log1p\b)/,/^(?:log10\b)/,/^(?:log2\b)/,/^(?:ln\b)/,/^(?:sqrt\b)/,/^(?:cos\b)/,/^(?:sin\b)/,/^(?:tan\b)/,/^(?:atan\b)/,/^(?:acos\b)/,/^(?:asin\b)/,/^(?:acosh\b)/,/^(?:asinh\b)/,/^(?:atanh\b)/,/^(?:abs\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:\~)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>\b)/,/^(?:>)/,/^(?:<\b)/,/^(?:==\b)/,/^(?:eq\b)/,/^(?:&&\b)/,/^(?:to\b)/,/^(?:(\[\s*(?:(?:(?:[\d.]+?)|(?:\[.*?\]))(?:\s*,\s*))*?((?:[\d.]+)|(?:\[.*?\]))\s*\]))/,/^(?:if\b)/,/^(?::)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}